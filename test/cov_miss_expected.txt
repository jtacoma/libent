model.c:34:			ent_alloc ((void**)&model, 0);
model.c:35:			return NULL;
model.c:109:		return NULL;
model.c:118:		ent_alloc ((void**)&newname, 0);
model.c:119:		return NULL;
model.c:124:		ent_alloc ((void**)&newname, 0);
model.c:125:		ent_table_free (t);
model.c:126:		return NULL;
processor.c:88:		return -1;
processor.c:95:		return -1;
processor.c:150:		return -1;
processor.c:161:		return -1;
processor.c:169:ent_processor_set_function (
processor.c:174:	if (! (p && function))
processor.c:176:		return -1;
processor.c:179:	p->func = function;
processor.c:180:	p->func_arg = arg;
processor.c:181:	return 0;
processor.c:205:		return NULL;
processor.c:227:		return (struct column_info) {0};
processor.c:236:		return (struct column_info) {0};
session.c:44:		return NULL;
session.c:51:		return NULL;
session.c:59:		ent_alloc ((void**)&s, 0);
session.c:60:		return NULL;
session.c:67:		ent_insertion_array_free (s->insertions);
session.c:68:		ent_alloc ((void**)&s, 0);
session.c:69:		return NULL;
session.c:183:		return -1;
session.c:188:		ent_table_free (buffer);
session.c:189:		return -1;
session.c:197:		ent_table_free (buffer);
session.c:198:		return -1;
session.c:219:		return -1;
session.c:227:		return -1;
session.c:245:		return -1;
session.c:288:ent_session_column_get (
session.c:293:	return ent_session_column_ref (s, table, column);
session.c:302:		return -1;
session.c:314:			return -1;
session.c:332:			return -1;
session.c:353:				return -1;
table.c:254:			ent_rlist_free (keep);
table.c:255:			return -1;
table.c:336:		errno = EINVAL;
table.c:337:		return -1;
