model.c:34:			ent_alloc ((void**)&model, 0);
model.c:35:			return NULL;
model.c:109:		return NULL;
model.c:118:		ent_alloc ((void**)&newname, 0);
model.c:119:		return NULL;
model.c:124:		ent_alloc ((void**)&newname, 0);
model.c:125:		ent_table_free (t);
model.c:126:		return NULL;
processor.c:88:		return -1;
processor.c:95:		return -1;
processor.c:150:		return -1;
processor.c:161:		return -1;
processor.c:169:ent_processor_set_function (
processor.c:174:	if (! (p && function))
processor.c:176:		return -1;
processor.c:179:	p->func = function;
processor.c:180:	p->func_arg = arg;
processor.c:181:	return 0;
processor.c:205:		return NULL;
processor.c:227:		return (struct column_info) {0};
processor.c:236:		return (struct column_info) {0};
session.c:44:		return NULL;
session.c:51:		return NULL;
session.c:59:		free (s);
session.c:60:		return NULL;
session.c:67:		ent_insertion_array_free (s->insertions);
session.c:68:		free (s);
session.c:69:		return NULL;
session.c:183:		return -1;
session.c:191:		ent_table_free (buffer);
session.c:192:		return -1;
session.c:213:		return -1;
session.c:221:		return -1;
session.c:239:		return -1;
session.c:282:ent_session_column_get (
session.c:287:	return ent_session_column_ref (s, table, column);
session.c:296:		return -1;
session.c:308:			return -1;
session.c:326:			return -1;
session.c:347:				return -1;
table.c:92:		*width = 0;
table.c:93:		return NULL;
table.c:221:			ent_rlist_free (keep);
table.c:222:			return -1;
table.c:276:			for (size_t k = 0; k < i; ++k)
table.c:278:				ent_array_free (dst_columns[k].array);
table.c:281:			ent_array_free (new_columns);
table.c:282:			ent_rlist_free (keep);
table.c:283:			return -1;
table.c:309:		return -1;
table.c:320:			return -1;
