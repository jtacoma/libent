column.c:22:		errno = EINVAL;
column.c:40:		errno = EINVAL;
column.c:41:		return;
column.c:53:		errno = EINVAL;
column.c:54:		return -1;
column.c:66:		errno = EINVAL;
column.c:67:		return -1;
lock.c:104:	size_t tables_len = ent_array_len (p->tables);
lock.c:106:	if (ent_array_set_len (p->tables, tables_len + 1) == -1)
lock.c:108:		return -1;
lock.c:111:	struct ent_table ** tables = ent_array_get (p->tables);
lock.c:113:	assert (tables);
lock.c:115:	tables[tables_len] = table;
lock.c:116:	ent_table_incref (table);
lock.c:118:	return (int) tables_len;
lock.c:175:	size_t columns_len = ent_array_len (p->columns);
lock.c:177:	if (ent_array_set_len (p->columns, columns_len + 1) == -1)
lock.c:179:		return -1;
lock.c:182:	struct ent_column * columns = ent_array_get (p->columns);
lock.c:184:	columns[columns_len] = *column;
lock.c:186:	return (int) columns_len;
lock.c:210:		return NULL;
